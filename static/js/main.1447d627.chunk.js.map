{"version":3,"sources":["channelsNames.ts","BotAPI.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["channelsNames","API_KEY","Channels","useState","channelsArray","setChannelsArray","loading","setLoading","searchInput","setSearchInput","promises","promisesPictures","promisesMembers","useEffect","sortedArray","getData","channelName","newChannel","title","link","description","pictureID","subscribers","push","fetch","then","res","json","data","result","photo","big_file_id","file_path","compare","a","b","Promise","all","sort","key","className","placeholder","onChange","input","target","value","map","channel","toLowerCase","includes","Card","id","isSearch","picture","props","href","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1447d627.chunk.js","sourcesContent":["export const channelsNames: string[] = [\r\n  \"dminews\",\r\n  \"fisicact\",\r\n  \"dieeinews\",\r\n  \"deinews\",\r\n  \"infoDSC\",\r\n  \"lexunictnews\",\r\n  \"biogeonews\",\r\n  \"biometecnews\",\r\n  \"dspsnews\",\r\n  \"disumnews\",\r\n  \"medicina_unict\",\r\n  \"disfornews\",\r\n  \"medclinnews\",\r\n  \"dgfinews\",\r\n  \"dsfnews\",\r\n  \"sdslinguenews\",\r\n  \"dicarnews\",\r\n  \"ersunews\",\r\n  \"bio_unict\",\r\n  \"geo_unict\",\r\n  \"scienze_ambientali\",\r\n  \"terapia_unict\",\r\n  \"Servizio_Sociale_Sociologia_news\",\r\n  \"lettere_unict\",\r\n  \"filosofia_unict\",\r\n  \"IngInfoNews\",\r\n  \"IngEleNews\",\r\n  \"IngIndNews\",\r\n  \"Spotted_DMI\",\r\n];\r\n","export const API_KEY: string = \"1345326174:AAFREz_4NSp7jQ1sdec97HxgmhSzspfVsPQ\";\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { channelsNames } from \"./channelsNames\";\r\nimport { ChannelEntry } from \"./ChannelEntry\";\r\nimport { API_KEY } from \"./BotAPI\";\r\nimport \"./App.css\";\r\n\r\nfunction Channels(): JSX.Element {\r\n  const [channelsArray, setChannelsArray] = useState<ChannelEntry[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [searchInput, setSearchInput] = useState<string>(\"\");\r\n  const promises: Promise<any>[] = [];\r\n  const promisesPictures: Promise<any>[] = [];\r\n  const promisesMembers: Promise<any>[] = [];\r\n\r\n  useEffect(() => {\r\n    const sortedArray: ChannelEntry[] = [];\r\n\r\n    function getData(channelName: string): void {\r\n      const newChannel: ChannelEntry = {\r\n        title: \"\",\r\n        link: \"\",\r\n        description: \"\",\r\n        pictureID: \"\",\r\n        subscribers: 0,\r\n      };\r\n\r\n      promises.push(\r\n        fetch(\r\n          `https://api.telegram.org/bot${API_KEY}/getChat?chat_id=@${channelName}`\r\n        )\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            newChannel.title = data.result.title;\r\n            newChannel.link = `https://t.me/${channelName}`;\r\n            newChannel.description = data.result.description\r\n              ? data.result.description\r\n              : \"\";\r\n            promisesPictures.push(\r\n              fetch(\r\n                `https://api.telegram.org/bot${API_KEY}/getFile?file_id=${data.result.photo.big_file_id}`\r\n              )\r\n                .then(res => res.json())\r\n                .then(\r\n                  data =>\r\n                    (newChannel.pictureID = `https://api.telegram.org/file/bot${API_KEY}/${data.result.file_path}`)\r\n                )\r\n            );\r\n          })\r\n      );\r\n\r\n      promisesMembers.push(\r\n        fetch(\r\n          `https://api.telegram.org/bot${API_KEY}/getChatMembersCount?chat_id=@${channelName}`\r\n        )\r\n          .then(res => res.json())\r\n          .then(data => (newChannel.subscribers = data.result))\r\n          .then(() => sortedArray.push(newChannel))\r\n      );\r\n    }\r\n\r\n    for (const channel of channelsNames) {\r\n      getData(channel);\r\n    }\r\n\r\n    function compare(a: ChannelEntry, b: ChannelEntry): number {\r\n      if (a.subscribers < b.subscribers) return 1;\r\n      else if (a.subscribers > b.subscribers) return -1;\r\n      return 0;\r\n    }\r\n\r\n    Promise.all(promises).then(() =>\r\n      Promise.all(promisesPictures).then(() =>\r\n        Promise.all(promisesMembers).then(() => {\r\n          sortedArray.sort(compare);\r\n          setChannelsArray(sortedArray);\r\n          setLoading(false);\r\n        })\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  let key: number = 0;\r\n  return (\r\n    <div>\r\n      <h1 className=\"rankingTitle\">Classifica canali UNICT</h1>\r\n      <input\r\n        className=\"searchInput\"\r\n        placeholder=\"Search...\"\r\n        onChange={input => setSearchInput(input.target.value)}\r\n      ></input>\r\n      {loading ? (\r\n        <h1 className=\"loadingText\">Loading...</h1>\r\n      ) : (\r\n        <div className=\"mainContent\">\r\n          {channelsArray.map(channel =>\r\n            channel.title.toLowerCase().includes(searchInput) ? (\r\n              <div className=\"cards\">\r\n                <Card\r\n                  key={key++}\r\n                  id={key}\r\n                  isSearch={searchInput != \"\"}\r\n                  title={channel.title}\r\n                  link={channel.link}\r\n                  description={channel.description}\r\n                  picture={channel.pictureID}\r\n                  subscribers={channel.subscribers}\r\n                />\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card(props: any): JSX.Element {\r\n  return (\r\n    <ul className=\"actualCardsContents\">\r\n      <div className=\"imageAndRanking\">\r\n        <a href={props.link}>\r\n          <img\r\n            className=\"images\"\r\n            src={props.picture}\r\n            alt={props.title + \" picture\"}\r\n          />\r\n        </a>\r\n        <h2 className=\"rankings\">{props.isSearch ? \"\" : props.id + \"Â°\"}</h2>\r\n      </div>\r\n      <br />\r\n      <a className=\"channelsLinks\" href={props.link}>\r\n        <h1>{props.title}</h1>\r\n      </a>\r\n      <p className=\"descriptions\">{props.description}</p>\r\n      <p className=\"subscribers\">Subscribers: {props.subscribers}</p>\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction App(): JSX.Element {\r\n  return <Channels />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}