{"version":3,"sources":["channelsNames.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["channelsNames","channels","compare","a","b","subscribers","RenderChannels","sort","key","map","channel","className","href","link","title","App","channelName","newChannel","description","pictureID","push","populateChannelsArray","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAAaA,EAA2B,CACpC,UACA,WACA,YACA,UACA,UACA,eACA,aACA,eACA,WACA,YACA,iBACA,aACA,cACA,WACA,UACA,gBACA,YACA,WACA,YACA,YACA,qBACA,gBACA,mCACA,gBACA,kBACA,cACA,aACA,aACA,eCvBAC,G,MAA2B,IAkC/B,SAASC,EAAQC,EAAiBC,GAChC,OAAID,EAAEE,YAAcD,EAAEC,aAAqB,EAClCF,EAAEE,YAAcD,EAAEC,YAAoB,EACxC,EAGT,SAASC,IACPL,EAASM,KAAKL,GACd,IAAIM,EAAc,EAElB,OACE,6BACGP,EAASQ,KAAI,SAACC,GAAD,OAAa,wBAAIC,UAAU,eAAeH,IAAKA,KAC3D,uBAAGG,UAAU,gBAAgBC,KAAMF,EAAQG,MAAM,4BAAKH,EAAQI,aAavDC,MAPf,WAEE,OArDF,WAAuC,oBAEbf,GAFa,IAErC,2BAAuC,CAAC,IAA/BgB,EAA8B,QACjCC,EAA2B,CAC7BH,MAAO,GACPD,KAAM,GACNK,YAAa,GACbC,UAAW,GACXd,YAAa,GAGfY,EAAWH,MAAQE,EAEnBC,EAAWJ,KAAX,uBAAkCG,GAGlCf,EAASmB,KAAKH,IAhBqB,+BAoDrCI,GAEE,kBAACf,EAAD,OClDgBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a02c0a47.chunk.js","sourcesContent":["export const channelsNames : string[] = [\r\n    \"dminews\",\r\n    \"fisicact\",\r\n    \"dieeinews\",\r\n    \"deinews\",\r\n    \"infoDSC\",\r\n    \"lexunictnews\",\r\n    \"biogeonews\",\r\n    \"biometecnews\",\r\n    \"dspsnews\",\r\n    \"disumnews\",\r\n    \"medicina_unict\",\r\n    \"disfornews\",\r\n    \"medclinnews\",\r\n    \"dgfinews\",\r\n    \"dsfnews\",\r\n    \"sdslinguenews\",\r\n    \"dicarnews\",\r\n    \"ersunews\",\r\n    \"bio_unict\",\r\n    \"geo_unict\",\r\n    \"scienze_ambientali\",\r\n    \"terapia_unict\",\r\n    \"Servizio_Sociale_Sociologia_news\",\r\n    \"lettere_unict\",\r\n    \"filosofia_unict\",\r\n    \"IngInfoNews\",\r\n    \"IngEleNews\",\r\n    \"IngIndNews\",\r\n    \"Spotted_DMI\",\r\n]","import React, { useEffect, useState } from \"react\";\nimport { channelsNames } from \"./channelsNames\";\nimport { ChannelEntry } from \"./ChannelEntry\";\nimport { API_KEY } from \"./BotAPI\";\nimport \"./App.css\";\n\nlet channels: ChannelEntry[] = [];\n\nfunction populateChannelsArray(): void {\n  // Function responsible of correctly initialize above \"channels\" array\n  for (let channelName of channelsNames) {\n    let newChannel: ChannelEntry = {\n      title: \"\",\n      link: \"\",\n      description: \"\",\n      pictureID: \"\",\n      subscribers: 0\n    };\n\n    newChannel.title = channelName;\n    //getFormalName(channelName).then(r => newChannel.title = r);\n    newChannel.link = `https://t.me/${channelName}`;\n    //getPictureID(channelName).then(r => newChannel.pictureID = r);\n\n    channels.push(newChannel);\n  }\n\n  function getFormalName(channelName: string): Promise<string> {\n    return fetch(`https://api.telegram.org/bot${API_KEY}/getChat?chat_id=@${channelName}`)\n      .then(r => r.json())\n      .then((r) => { return r.result.title; })\n  }\n\n  function getPictureID(channelName: string): Promise<string> {\n    return fetch(`https://api.telegram.org/bot${API_KEY}/getChat?chat_id=@${channelName}`)\n      .then(r => r.json())\n      .then((r) => { return r.result.photo.big_file_id; })\n  }\n}\n\nfunction compare(a: ChannelEntry, b: ChannelEntry) {\n  if (a.subscribers < b.subscribers) return -1;\n  else if (a.subscribers > b.subscribers) return 1;\n  return 0;\n}\n\nfunction RenderChannels() {\n  channels.sort(compare);\n  let key: number = 0;\n\n  return (\n    <div>\n      {channels.map((channel) => <ul className=\"channelsList\" key={key++}>\n        <a className=\"channelsLinks\" href={channel.link}><h1>{channel.title}</h1></a>\n      </ul>)}\n    </div>\n  );\n}\n\nfunction App() {\n  populateChannelsArray();\n  return (\n    <RenderChannels />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}