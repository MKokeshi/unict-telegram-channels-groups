{"version":3,"sources":["Channels/channelsNames.ts","Channels/Channels.tsx","Groups/groupsNames.ts","Groups/Groups.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["channelsNames","API","Channels","useState","channelsArray","setChannelsArray","loading","setLoading","searchInput","setSearchInput","useEffect","promises","promisesPictures","promisesSubscribers","sortedArray","getData","channelName","newChannelEntry","title","link","description","pictureURL","subscribers","push","fetch","then","res","json","data","result","photo","big_file_id","d","file_path","compare","a","b","Promise","all","sort","key","className","to","placeholder","onChange","input","target","value","src","alt","map","channel","toLowerCase","includes","Card","ranking","isSearch","picture","props","href","firstYearGroupsNames","secondYearGroupsNames","thirdYearGroupsNames","Groups","groupsArray","setGroupsArray","groupName","year","newGroupEntry","members","encodeURIComponent","tmpLink","substring","length","image_link","tmpPic","tmpMembers","members_number","split","parseInt","group","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb22a99f.chunk.js","sourcesContent":["export const channelsNames: string[] = [\n  \"dminews\",\n  \"fisicact\",\n  \"dieeinews\",\n  \"deinews\",\n  \"infoDSC\",\n  \"lexunictnews\",\n  \"biogeonews\",\n  \"biometecnews\",\n  \"dspsnews\",\n  \"disumnews\",\n  \"medicina_unict\",\n  \"disfornews\",\n  \"medclinnews\",\n  \"dgfinews\",\n  \"dsfnews\",\n  \"sdslinguenews\",\n  \"dicarnews\",\n  \"ersunews\",\n  \"bio_unict\",\n  \"geo_unict\",\n  \"scienze_ambientali\",\n  \"terapia_unict\",\n  \"Servizio_Sociale_Sociologia_news\",\n  \"lettere_unict\",\n  \"filosofia_unict\",\n  \"IngInfoNews\",\n  \"IngEleNews\",\n  \"IngIndNews\",\n  \"Spotted_DMI\",\n];\n","import React, { useEffect, useState } from \"react\";\nimport { channelsNames } from \"./channelsNames\";\nimport { Link } from \"react-router-dom\";\n\ninterface ChannelEntry {\n  title: string;\n  link: string;\n  description: string;\n  pictureURL: string;\n  subscribers: number;\n}\n\nconst API = 'https://usefulness.altervista.org/list-telegram-groups/api.telegram.php?';\n\nexport function Channels(): JSX.Element {\n  const [channelsArray, setChannelsArray] = useState<ChannelEntry[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n\n  useEffect(() => {\n    const promises: Promise<any>[] = [];\n    const promisesPictures: Promise<any>[] = [];\n    const promisesSubscribers: Promise<any>[] = [];\n    const sortedArray: ChannelEntry[] = [];\n\n    function getData(channelName: string): void {\n      const newChannelEntry: ChannelEntry = {\n        title: \"\",\n        link: \"\",\n        description: \"\",\n        pictureURL: \"\",\n        subscribers: 0,\n      };\n\n      promises.push(\n        fetch(\n          `${API}chat=${channelName}`\n        )\n          .then(res => res.json())\n          .then(data => {\n            newChannelEntry.title = data.result.title;\n            newChannelEntry.link = `https://t.me/${channelName}`;\n            newChannelEntry.description = data.result.description\n              ? data.result.description\n              : \"\";\n            promisesPictures.push(\n              fetch(\n                `${API}file=${data.result.photo.big_file_id}`\n              )\n                .then(res => res.json())\n                .then(d => (newChannelEntry.pictureURL = `${API}path=${d.result.file_path}`))\n            );\n          })\n      );\n\n      promisesSubscribers.push(\n        fetch(\n          `${API}count=${channelName}`\n        )\n          .then(res => res.json())\n          .then(data => (newChannelEntry.subscribers = data.result))\n          .then(() => sortedArray.push(newChannelEntry))\n      );\n    }\n\n    for (const channel of channelsNames) {\n      getData(channel);\n    }\n\n    function compare(a: ChannelEntry, b: ChannelEntry): number {\n      if (a.subscribers < b.subscribers) return 1;\n      else if (a.subscribers > b.subscribers) return -1;\n      return 0;\n    }\n\n    Promise.all(promises).then(() =>\n      Promise.all(promisesPictures).then(() =>\n        Promise.all(promisesSubscribers).then(() => {\n          sortedArray.sort(compare);\n          setChannelsArray(sortedArray);\n          setLoading(false);\n        })\n      )\n    );\n  }, []);\n\n  let key: number = 0;\n  return (\n    <div>\n      <div className=\"routing\">\n        <h1 className=\"rankingTitle\">Classifica canali UNICT</h1>\n        <Link to=\"/groups\" className=\"goToGroupsLink\">\n          Visualizza Gruppi DMI UNICT\n        </Link>\n      </div>\n      <input\n        className=\"searchInput\"\n        placeholder=\"Search...\"\n        onChange={input => setSearchInput(input.target.value)}\n      ></input>\n      {loading ? (\n        <img src=\"loading.gif\" className=\"loading\" key=\"loading\" alt=\"loading\" />\n      ) : (\n        <div className=\"mainContent\">\n          {channelsArray.map(channel =>\n            channel.title.toLowerCase().includes(searchInput.toLowerCase()) && (\n              <div className=\"cards\" key={key++}>\n                <Card\n                  ranking={key}\n                  isSearch={searchInput !== \"\"}\n                  title={channel.title}\n                  link={channel.link}\n                  description={channel.description}\n                  picture={channel.pictureURL}\n                  subscribers={channel.subscribers}\n                />\n              </div>\n            )\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction Card(props: any): JSX.Element {\n  return (\n    <ul className=\"actualCardsContents\">\n      <div className=\"imageAndRanking\">\n        <a href={props.link}>\n          <img\n            className=\"images\"\n            src={props.picture}\n            alt={props.title + \" picture\"}\n          />\n        </a>\n        <h2 className=\"rankings\">{props.isSearch ? \"\" : props.ranking + \"°\"}</h2>\n      </div>\n      <a className=\"links\" href={props.link}>\n        <h1>{props.title}</h1>\n      </a>\n      <p className=\"descriptions\">{props.description}</p>\n      <p className=\"subscribers\">Subscribers: {props.subscribers}</p>\n    </ul>\n  );\n}\n","export const firstYearGroupsNames: string[] = [\n  \"ARCHITETTURA DEGLI ELABORATORI E LABORATORIO\",\n  \"ELEMENTI DI ANALISI MATEMATICA 1\",\n  \"FONDAMENTI DI INFORMATICA\",\n  \"MATEMATICA DISCRETA\",\n  \"PROGRAMMAZIONE I E LABORATORIO\",\n  \"PROGRAMMAZIONE II\",\n  \"ULTERIORI CONOSCENZE LINGUISTICHE\",\n];\n\nexport const secondYearGroupsNames: string[] = [\n  \"ALGORITMI E LABORATORIO\",\n  \"BASI DI DATI\",\n  \"ELEMENTI DI ANALISI MATEMATICA 2\",\n  \"INGEGNERIA DEL SOFTWARE\",\n  \"RETI DI CALCOLATORI\",\n  \"SISTEMI OPERATIVI\",\n  \"[Discussione] I&M 2019_2020\",\n];\n\nexport const thirdYearGroupsNames: string[] = [\n  \"CALCOLO NUMERICO\",\n  \"COMPUTER GRAFICA\",\n  \"DIGITAL FORENSICS\",\n  \"FISICA\",\n  \"INFORMATICA MUSICALE\",\n  \"INTERNET SECURITY\",\n  \"INTRODUZIONE AL DATA MINING\",\n  \"IT LAW\",\n  \"LABORATORIO DI SISTEMI A MICROCONTROLLORE\",\n  \"METODI MATEMATICI E STATISTICI\",\n  \"PROGRAMMAZIONE MOBILE\",\n  \"PROGRAMMAZIONE PARALLELA SU ARCHITETTURE GPU\",\n  \"SISTEMI CENTRALI\",\n  \"SOCIAL MEDIA MANAGEMENT\",\n  \"STARTUP DI IMPRESA E MODELLI DI BUSINESS\",\n  \"SVILUPPO DI GIOCHI DIGITALI\",\n  \"TECHNOLOGIES FOR ADVANCED PROGRAMMING\",\n  \"TECNOLOGIE PER I SISTEMI DISTRIBUITI E IL WEB CON LABORATORIO\",\n  \"Web Development 2020\",\n];\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  firstYearGroupsNames,\n  secondYearGroupsNames,\n  thirdYearGroupsNames,\n} from \"./groupsNames\";\n\ninterface GroupEntry {\n  title: string;\n  link: string;\n  description: string;\n  pictureURL: string;\n  members: number;\n}\n\nexport function Groups(): JSX.Element {\n  const [groupsArray, setGroupsArray] = useState<GroupEntry[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [searchInput, setSearchInput] = useState<string>(\"\");\n\n  useEffect(() => {\n    const sortedArray: GroupEntry[] = [];\n    const promises: Promise<any>[] = [];\n\n    function getData(groupName: string, year: string): void {\n      const newGroupEntry: GroupEntry = {\n        title: \"\",\n        link: \"\",\n        description: \"\",\n        pictureURL: \"\",\n        members: 0,\n      };\n\n      promises.push(\n        fetch(\n          `https://usefulness.altervista.org/list-telegram-groups/mid.php?path=${encodeURIComponent(year + '/' + groupName)}.json`\n        )\n          .then(res => res.json())\n          .then(data => {\n            newGroupEntry.title = groupName;\n            let tmpLink: string = data.link;\n            newGroupEntry.link = tmpLink.substring(1, tmpLink.length - 1);\n            newGroupEntry.description = data.description;\n            if (data.image_link === '') {\n              newGroupEntry.pictureURL = 'telegram.svg';\n            } else {\n              let tmpPic = data.image_link;\n              newGroupEntry.pictureURL = tmpPic.substring(1);\n            }\n            let tmpMembers: string[] = (data.members_number as string).split(\n              \" \"\n            );\n            newGroupEntry.members = parseInt(tmpMembers[0]);\n          })\n          .then(() => sortedArray.push(newGroupEntry))\n      );\n    }\n\n    for (const group of firstYearGroupsNames) {\n      getData(group, \"PRIMO_ANNO\");\n    }\n\n    for (const group of secondYearGroupsNames) {\n      getData(group, \"SECONDO_ANNO\");\n    }\n\n    for (const group of thirdYearGroupsNames) {\n      getData(group, \"TERZO_ANNO\");\n    }\n\n    function compare(a: GroupEntry, b: GroupEntry): number {\n      if (a.members < b.members) return 1;\n      else if (a.members > b.members) return -1;\n      return 0;\n    }\n\n    Promise.all(promises).then(() => {\n      sortedArray.sort(compare);\n      setGroupsArray(sortedArray);\n      setLoading(false);\n    });\n  }, []);\n\n  let key: number = 0;\n  return (\n    <div>\n      <div className=\"routing\">\n        <h1 className=\"rankingTitle\">Classifica gruppi DMI UNICT</h1>\n        <Link to=\"/channels\" className=\"goToChannelsLink\">\n          Visualizza Canali UNICT\n        </Link>\n      </div>\n      <input\n        className=\"searchInput\"\n        placeholder=\"Search...\"\n        onChange={input => setSearchInput(input.target.value)}\n      ></input>\n      {loading ? (\n        <img src=\"loading.gif\" className=\"loading\" key=\"loading\" alt=\"loading\" />\n      ) : (\n        <div className=\"mainContent\">\n          {groupsArray.map(group =>\n            group.title.toLowerCase().includes(searchInput.toLowerCase()) && (\n              <div className=\"cards\" key={key++}>\n                <Card\n                  ranking={key}\n                  isSearch={searchInput !== \"\"}\n                  title={group.title}\n                  link={group.link}\n                  description={group.description}\n                  picture={group.pictureURL}\n                  subscribers={group.members}\n                />\n              </div>\n            )\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction Card(props: any): JSX.Element {\n  return (\n    <ul className=\"actualCardsContents\">\n      <div className=\"imageAndRanking\">\n        <a href={props.link}>\n          <img\n            className=\"images\"\n            src={props.picture}\n            alt={props.title + \" picture\"}\n          />\n        </a>\n        <h2 className=\"rankings\">\n          {props.isSearch ? \"\" : props.ranking + \"°\"}\n        </h2>\n      </div>\n      <a className=\"links\" href={props.link}>\n        <h1>{props.title}</h1>\n      </a>\n      <p className=\"descriptions\">{props.description}</p>\n      <p className=\"subscribers\">Subscribers: {props.subscribers}</p>\n    </ul>\n  );\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport { Channels } from \"./Channels/Channels\";\nimport { Groups } from \"./Groups/Groups\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route exact path=\"/channels\">\n            <Channels />\n          </Route>\n          <Route exact path=\"/groups\">\n            <Groups />\n          </Route>\n          <Redirect to='/channels' />\n        </Switch>\n      </HashRouter>\n      <p className=\"credits\">\n        Coded by{\" \"}\n        <a href=\"https://github.com/Lorenzo-Pappalardo\">Lorenzo Pappalardo</a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}