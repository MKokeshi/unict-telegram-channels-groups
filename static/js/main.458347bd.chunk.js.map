{"version":3,"sources":["channelsNames.ts","App.tsx","BotAPI.ts","serviceWorker.ts","index.tsx"],"names":["channelsNames","Channels","useState","channelsArray","setChannelsArray","loading","setLoading","promises","useEffect","getData","channelName","newChannel","title","link","description","pictureID","subscribers","push","fetch","then","res","json","data","result","photo","big_file_id","before","compare","a","b","Promise","all","sort","key","className","map","channel","Card","id","picture","props","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uQAAaA,EAA2B,CACpC,UACA,WACA,YACA,UACA,UACA,eACA,aACA,eACA,WACA,YACA,iBACA,aACA,cACA,WACA,UACA,gBACA,YACA,WACA,YACA,YACA,qBACA,gBACA,mCACA,gBACA,kBACA,cACA,aACA,aACA,e,MCvBJ,SAASC,IAAyB,IAAD,EACWC,mBAAyB,IADpC,mBACxBC,EADwB,KACTC,EADS,OAEDF,oBAAkB,GAFjB,mBAExBG,EAFwB,KAEfC,EAFe,KAGzBC,EAA2B,GAEjCC,qBAAU,WACR,SAASC,EAAQC,GACf,IAAIC,EAA2B,CAC7BC,MAAO,GACPC,KAAM,GACNC,YAAa,GACbC,UAAW,GACXC,YAAa,GAGfT,EAASU,KAAKC,MAAM,+BAAD,OCrBM,iDDqBN,6BAA4DR,IAC5ES,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJX,EAAWC,MAAQU,EAAKC,OAAOX,MAC/BD,EAAWE,KAAX,uBAAkCH,GAClCC,EAAWG,YAAcQ,EAAKC,OAAOT,YAAcQ,EAAKC,OAAOT,YAAc,GAC7EH,EAAWI,UAAYO,EAAKC,OAAOC,MAAMC,YACzCrB,GAAiB,SAACsB,GAAD,4BAAgBA,GAAhB,CAAwBf,WAjBjC,oBAsBQX,GAtBR,IAsBd,2BAAqC,CACnCS,EADmC,UAtBvB,8BA0Bd,SAASkB,EAAQC,EAAiBC,GAChC,OAAID,EAAEZ,YAAca,EAAEb,aAAqB,EAClCY,EAAEZ,YAAca,EAAEb,YAAoB,EACxC,EAGTc,QAAQC,IAAIxB,GAAUY,MAAK,WACzBhB,EAAc6B,KAAKL,GACnBrB,GAAW,QAEZ,IAEH,IAAI2B,EAAc,EAClB,OACE,6BAEI5B,EACE,wBAAI6B,UAAU,eAAd,cACA/B,EAAcgC,KAAI,SAACC,GAAD,OAChB,kBAACC,EAAD,CAAMC,GAAIL,IAAOrB,MAAOwB,EAAQxB,MAAOC,KAAMuB,EAAQvB,KAAMC,YAAasB,EAAQtB,YAAayB,QAASH,EAAQrB,UAAWC,YAAaoB,EAAQpB,kBAM1J,SAASqB,EAAKG,GACZ,OACE,wBAAIP,IAAKO,EAAMF,IACb,6BACE,uBAAGJ,UAAU,gBAAgBO,KAAMD,EAAM3B,MAAM,4BAAK2B,EAAM5B,QAC1D,wBAAIsB,UAAU,eAAeM,EAAM1B,aACnC,uBAAGoB,UAAU,eAAb,gBAAyCM,EAAMxB,eAUxC0B,MAJf,WACE,OAAO,kBAACzC,EAAD,OE/DW0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.458347bd.chunk.js","sourcesContent":["export const channelsNames : string[] = [\r\n    \"dminews\",\r\n    \"fisicact\",\r\n    \"dieeinews\",\r\n    \"deinews\",\r\n    \"infoDSC\",\r\n    \"lexunictnews\",\r\n    \"biogeonews\",\r\n    \"biometecnews\",\r\n    \"dspsnews\",\r\n    \"disumnews\",\r\n    \"medicina_unict\",\r\n    \"disfornews\",\r\n    \"medclinnews\",\r\n    \"dgfinews\",\r\n    \"dsfnews\",\r\n    \"sdslinguenews\",\r\n    \"dicarnews\",\r\n    \"ersunews\",\r\n    \"bio_unict\",\r\n    \"geo_unict\",\r\n    \"scienze_ambientali\",\r\n    \"terapia_unict\",\r\n    \"Servizio_Sociale_Sociologia_news\",\r\n    \"lettere_unict\",\r\n    \"filosofia_unict\",\r\n    \"IngInfoNews\",\r\n    \"IngEleNews\",\r\n    \"IngIndNews\",\r\n    \"Spotted_DMI\",\r\n]","import React, { useEffect, useState } from \"react\";\r\nimport { channelsNames } from \"./channelsNames\";\r\nimport { ChannelEntry } from \"./ChannelEntry\";\r\nimport { API_KEY } from \"./BotAPI\";\r\nimport \"./App.css\";\r\n\r\nfunction Channels(): JSX.Element {\r\n  const [channelsArray, setChannelsArray] = useState<ChannelEntry[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const promises: Promise<any>[] = [];\r\n\r\n  useEffect(() => {\r\n    function getData(channelName: string): void {\r\n      let newChannel: ChannelEntry = {\r\n        title: \"\",\r\n        link: \"\",\r\n        description: \"\",\r\n        pictureID: \"\",\r\n        subscribers: 0\r\n      };\r\n\r\n      promises.push(fetch(`https://api.telegram.org/bot${API_KEY}/getChat?chat_id=@${channelName}`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          newChannel.title = data.result.title;\r\n          newChannel.link = `https://t.me/${channelName}`;\r\n          newChannel.description = data.result.description ? data.result.description : \"\";\r\n          newChannel.pictureID = data.result.photo.big_file_id;\r\n          setChannelsArray((before) => [...before, newChannel]);\r\n        })\r\n      );\r\n    }\r\n\r\n    for (const channel of channelsNames) {\r\n      getData(channel);\r\n    }\r\n\r\n    function compare(a: ChannelEntry, b: ChannelEntry): number {\r\n      if (a.subscribers < b.subscribers) return -1;\r\n      else if (a.subscribers > b.subscribers) return 1;\r\n      return 0;\r\n    }\r\n\r\n    Promise.all(promises).then(() => {\r\n      channelsArray.sort(compare);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  let key: number = 0;\r\n  return (\r\n    <div>\r\n      {\r\n        loading ?\r\n          <h1 className=\"loadingText\">Loading...</h1> :\r\n          channelsArray.map((channel) =>\r\n            <Card id={key++} title={channel.title} link={channel.link} description={channel.description} picture={channel.pictureID} subscribers={channel.subscribers} />)\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card(props: any): JSX.Element {\r\n  return (\r\n    <ul key={props.id}>\r\n      <div>\r\n        <a className=\"channelsLinks\" href={props.link}><h1>{props.title}</h1></a>\r\n        <h3 className=\"description\">{props.description}</h3>\r\n        <p className=\"subscribers\">Subscribers: {props.subscribers}</p>\r\n      </div>\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction App(): JSX.Element {\r\n  return <Channels />\r\n}\r\n\r\nexport default App;","export const API_KEY: string = \"1345326174:AAFREz_4NSp7jQ1sdec97HxgmhSzspfVsPQ\"","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}